@model Ginosis.Banat.MvcWebUI.Models.Mixture.MixtureUpdateViewModel
@{
    ViewBag.Title = "Update";
    Layout = "~/Views/_LayoutPage2.cshtml";
}

<div class="card" id="newMixtureForm">
    <div class="card-header bg-white header-elements-inline">
        <h5 class="card-title"><strong>Yeni Karışım Güncelleme Sayfası</strong></h5>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("Update", "Mixture", FormMethod.Post))
        {
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.AntiForgeryToken()

            <div class="form-group row">
                <div class="col-lg-4">
                    <div class="row">
                        <label class="col-md-3 col-form-label">Adı</label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Mixture.Name, new { @class = "form-control", @placeholder = "Adı" })
                            @Html.HiddenFor(x => x.Mixture.Id)
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="row">
                        <label class="col-md-3 col-form-label">Kodu</label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Mixture.Code, new { @class = "form-control", @placeholder = "Kodu", maxLength = "9" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="text-right">
                <button type="button" class="btn btn-primary" id="updateMixture">Karışımı Güncelle</button>
            </div>

        }
    </div>
</div>

<div class="card" id="newSemiProductForm">
    <div class="card-header bg-white header-elements-inline">
        <h5 class="card-title"><strong>Karışım Formülü</strong></h5>
    </div>
    <div class="card-body">

        <div class="form-group row">
            <div class="col-lg-4">
                <div class="row">
                    <label class="col-md-3 col-form-label">Bileşen</label>
                    <div class="col-md-9">
                        @Html.DropDownListFor(m => m.SelectedComponentId, new SelectList(Model.Bilesenler, "Id", "DisplayName"), "Seçiniz",
                            new { @class = "form-control select-search", @id = "Components", @name = "Components" })
                    </div>
                </div>
            </div>

            <div class="col-lg-3">
                <div class="row">
                    <label class="col-md-3 col-form-label">Oran</label>
                    <div class="col-md-9">
                        @Html.TextBoxFor(m => m.CompAmount, new { @class = "form-control", @placeholder = "Oran", @type = "number" })
                    </div>
                </div>
            </div>

            <div class="col-lg-2">
                <div class="row">
                    <div class="col-md-9">
                        <button type="button" class="btn btn-success" id="addComponent"><i class="icon-cart-add2 mr-2"></i> Bileşen Ekle</button>
                    </div>
                </div>
            </div>

            <div class="col-lg-3">
                <div class="row">
                    <label class="col-md-6 col-form-label">Kalan Oran</label>
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.TotalRate, new { @class = "form-control", @placeholder = "Kalan Oran", disabled = "disabled" })
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<div class="card" id="mixedTable">
    <div class="card-header bg-white header-elements-inline">
        <h5 class="card-title"><strong>Bileşenler</strong></h5>
    </div>


    <div class="card-body">

        <table class="table datatable-basic table-hover" id="ComponentGrid">
            <thead>
                <tr>
                    <th>Bileşen Kodu</th>
                    <th>Miktar</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    </div>


</div>


@section PageScripts
{
    <script src="~/Scripts/jquery.dataTables.js"></script>
    <script src="https://cdn.datatables.net/plug-ins/1.10.19/api/sum().js"></script>
    <script type="text/javascript">

        function totalPriceCalc() {

            var table = $('#ComponentGrid').DataTable();
            var tableTotalSum = table.column(1).data().sum();
            var resultTotalSum = parseFloat(100 - tableTotalSum).toFixed(2);


            $('#TotalRate').val(resultTotalSum);

            if (resultTotalSum != 0) {

                $('#TotalRate').css('background-color', 'red');
            } else {
                $('#TotalRate').css('background-color', 'white');
            }


        }

        function GetComponentMix() {

            let mixId = $('#Mixture_Id').val();

            $.ajax({
                type: 'GET',
                url: '/Mixture/GetComponentMix',
                data: { mixtureId: mixId },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    var table = $('#ComponentGrid').DataTable();
                    table.clear().draw();
                    for (var i = 0; i < data.length; i++) {

                        table.row.add([data[i].DisplayName, data[i].Rate,
                        ' <a onClick="RemoveFormation(' + data[i].Id + '); return false;" title="Çıkar"><i class="icon-cross2 text-danger"></i>Çıkar</a>'
                        ])
                            .draw()
                            .node();

                    }

                    totalPriceCalc();

                },
                error: function (data) {
                    swal({
                        title: 'Hata',
                        text: 'İşlem Hatalı. Daha Sonra Tekrar Deneyiniz!',
                        type: 'error',
                        buttonsStyling: false,
                        confirmButtonClass: 'btn btn-primary',
                    });
                }
            });
        }

        function RemoveFormation(id) {
            $.ajax({
                type: 'POST',
                url: '/Mixture/RemoveFormation',
                data: { id: id },
                success: successFunc,
                error: errorFunc
            });

            function successFunc(result, status) {
                if (result.IsError == false) {

                    GetComponentMix();
                }
            }

            function errorFunc() {
                alert('hata');
            }
        }


        $(document).ready(function () {

            //jQuery.fn.dataTable.Api.register('sum()', function () {
            //    return this.flatten().reduce(function (a, b) {
            //        var x = parseInt(a) || 0;
            //        var y = parseInt($(b).attr('data-order')) || 0;
            //        return x + y
            //    }, 0);
            //});

            $('.select-search').select2();
            createDatatable();
            GetComponentMix();

            function successFunc() {
                alert('ok');
            }
            function errorFunc() {
                alert('hata');
            }

            $('#addComponent').click(function () {

                let mixtureId = $('#Mixture_Id').val();
                let componentId = $('#Components').val();
                let rate = parseFloat($('#CompAmount').val());

                var table = $('#ComponentGrid').DataTable();
                var tableTotalSum = table.column(1).data().sum();
                var selectedText = $("#select2-Components-container").text();

                if (!componentId > 0 || !rate > 0) {
                    swal({
                        title: 'Hata',
                        text: 'Lütfen bileşen ve oran seçiniz',
                        type: 'error',
                        buttonsStyling: false,
                        confirmButtonClass: 'btn btn-primary',
                    });
                    return;
                }
                if (table.column(0).data().toArray().includes(selectedText)) {
                    swal({
                        title: 'Hata',
                        text: 'Kayıt daha önceden eklenmiş',
                        type: 'error',
                        buttonsStyling: false,
                        confirmButtonClass: 'btn btn-primary',
                    });
                    return;
                }
                if (tableTotalSum + rate > 100) {
                    swal({
                        title: 'Hata',
                        text: 'Toplam oran %100 ü geçemez.',
                        type: 'error',
                        buttonsStyling: false,
                        confirmButtonClass: 'btn btn-primary',
                    });
                    return;
                }

                var model = {
                    mixId: mixtureId,
                    componentId: componentId,
                    rate: rate
                }

                $.ajax({
                    type: 'POST',
                    url: '/Mixture/AddCompToMix',
                    data: model,
                    success: successFunc,
                    error: errorFunc
                });

                function successFunc(result, status) {
                    if (result > 0) {

                        var table = $('#ComponentGrid').DataTable();
                        table.row.add([selectedText, rate,
                            ' <a onClick="RemoveFormation(' + result + '); return false;" title="Çıkar"><i class="icon-cross2 text-danger"></i>Çıkar</a>'
                        ]
                        )
                            .draw()
                            .node();

                        totalPriceCalc();

                        $('#CompAmount').val("");
                        $('#Components').val("");
                        $("#select2-Components-container").text("Seçiniz");  

                    }
                }

            });

            $('#updateMixture').click(function () {
                let id = $('#Mixture_Id').val();
                let name = $('#Mixture_Name').val();
                let code = $('#Mixture_Code').val();
                if (code.length != 9) {
                    swal({
                        title: 'Hata',
                        text: 'Karışım kodu 9 hane olmalıdır.',
                        type: 'error'
                    });
                } else {

                    var mixtureModel = {
                        Id: id,
                        Code: code,
                        Name: name
                    }

                    var model = {
                        Mixture: mixtureModel
                    }

                    $.ajax({
                        type: 'POST',
                        url: '/Mixture/Update',
                        data: model,
                        success: successFuncMix,
                        error: errorFuncMix
                    });
                }

                function successFuncMix(result, status) {

                    if (result.IsError == true) {
                        swal({
                            title: 'Hata',
                            text: result.Message,
                            type: 'error'
                        });
                    } else {

                        swal({
                            title: 'Onay!',
                            text: 'Karışım Güncelleme İşlem Başarıyla Tamamlandı',
                            type: 'success',
                            buttonsStyling: false,
                            confirmButtonClass: 'btn btn-primary',
                            confirmButtonText: 'Tamam'
                        });

                    }
                }
                function errorFuncMix(result, status) {
                    swal({
                        title: 'Hata',
                        text: 'Karışım Güncelleme İşlem Hatalı. Daha Sonra Tekrar Deneyiniz!',
                        type: 'error'
                    });
                }


            });

        })


        function createDatatable() {
            $('#ComponentGrid').DataTable({
                dom: '<"datatable-header"fl><"datatable-scroll"t><"datatable-footer"ip>',
                "language": {
                    "url": "/Scripts/dil.json",

                },
                searching: false,
                paging: true,
                "bInfo": false,
                "bLengthChange": false,

            });

            $.extend($.fn.dataTableExt.oSort, {
                "turkish-pre": function (a) {
                    var special_letters = {
                        "C": "Ca", "c": "ca", "Ç": "Cb", "ç": "cb",
                        "G": "Ga", "g": "ga", "Ğ": "Gb", "ğ": "gb",
                        "I": "Ia", "ı": "ia", "İ": "Ib", "i": "ib",
                        "O": "Oa", "o": "oa", "Ö": "Ob", "ö": "ob",
                        "S": "Sa", "s": "sa", "Ş": "Sb", "ş": "sb",
                        "U": "Ua", "u": "ua", "Ü": "Ub", "ü": "ub"
                    };
                    for (var val in special_letters)
                        a = a.split(val).join(special_letters[val]).toLowerCase();
                    return a;
                },

                "turkish-asc": function (a, b) {
                    return ((a < b) ? -1 : ((a > b) ? 1 : 0));
                },

                "turkish-desc": function (a, b) {
                    return ((a < b) ? 1 : ((a > b) ? -1 : 0));
                }
            });
        }
    </script>
}


